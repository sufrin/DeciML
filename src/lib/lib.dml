{- 
   The entire DeciML library.
   
   This library includes provision for streams: effectively
   lists constructed with a cons that is strict in its first
   argument and lazy in its tail. This laziness isn't strictly
   needed, but it demonstrates the intended use of lazy lambda
   abstraction (λλ v → E). 
      
-}



import "notation";

let id     x   = x
  ; const  x   = λλ y → x     -- lazy const (see ∧ ∨)
  ; f @ x      = f x
  ; (f ∘ g) x  = f (g x)
  ; (f ⨾ g) x  = g (f x)
 ;; 
 
let (+)  = prim_add
  ; (-)  = prim_sub
  ; (*)  = prim_mul
  ; (/)  = prim_div
  ; (%)  = prim_mod
  ; (<)  = prim_ls
  ; (≤)  = prim_le
  ; (>)  = prim_gr
  ; (≥)  = prim_ge
  ; (≡)  = prim_struct_eq
  ; (=)  = prim_eq
  ; x≠y  = if x=y then False else True 
  ; x≢y  = if x≡y then False else True 
  ; pred = prim_pred
  ; succ = prim_succ
  -- references
  ; (:=) = set
  ; (!)  = get
  ; dec r = r := pred !r
  ; inc r = r := succ !r
  -- guards (for function pattern-matching) 
  ; (when) = λλλ value guard -> if force guard then force value else prim_nomatch()
 ;;
 

{- 
        Changing the following few definitions to those in the right column makes the library strict
-}

let strict f x  = f(force x)             -- strict = id
  ; (~)         = force                  -- (~)    = id
  ; (:::)       = λ x → λλ xs → x:xs     -- (:::)  = (:) -- lazy in its second argument
  ; curry f x y = f (~x,~y)              -- curry f x y =  f (x, y)
 ;;

{-
        ---------------------------------------------------------------------------
-}

let pr = prim_println;;

let (∧) = strict ⟨ True → id         | False → const False ⟩
  ; (∨) = strict ⟨ True → const True | False → id          ⟩
  ; (¬) = strict ⟨ True → False      | False → True        ⟩
 ;;
 

{-
        Outfix operator ⟦⟧ was declared with constructors Nil and :
        
-}
let  (⟦.⟧) v = v;; 

--
-- Streams (lists lazy in their tails) use ::: not :
--
let isNil         = strict ⟨ Nil   → True | _ → False ⟩ 
  ; isCons        = strict ⟨ _ : _ → True | _ → False ⟩ 
  ; hd            = strict ⟨ x : _  → x  | other → failWith("hd", other)⟩ 
  ; tl            = strict ⟨ _ : xs → xs | other → failWith("tl", other)⟩ 

  ; (n↑xs)      = if n>0 ∧ isCons xs then  hd xs : (pred n ↑ tl xs) else Nil
  ; (n↓xs)      = if isNil xs ∨ n=0 then xs else pred n ↓ tl xs

  ; (f ⊛)       = let map xs = if isNil xs then Nil else (f @ hd xs) ::: map (tl xs) in map
  ; delay       = λλ x → x
  ; fix         = λλ f → f (fix f)
 ;;


let foldr (⊗) nil'  = μ f → strict ⟨ Nil →  nil'  | x:xs →  x ⊗ f xs ⟩
  ; xs ++ ys        = foldr (:) ys xs
  ; foldl start (⊗) = let f state = strict ⟨ Nil →  state | x:xs →  f (state ⊗ x) xs⟩ in f start
  ; rev             = let f xs    = strict ⟨ Nil → xs     | y:ys →  f (y:xs) ys⟩      in f Nil
  
  ; map   = (⊛)
  ; do f  = foldl () (λ _ x → f x >> ()) 
  
  ; (x ∈)     = μ mem → strict ⟨ Nil → False | x':xs → x≡x' ∨ mem xs ⟩ 
  ; x ∉ xs    = ¬(x∈xs)
  ; (xs ∪ ys) = catFilter (∉xs) xs ys
   
  ; (|||) = curry
            ⟨ (Nil, _) → Nil
            | (_, Nil) → Nil
            | (x:xs, y:ys) → (x,y):(xs|||ys)
            ⟩
            
  ; takeWhile p =
    μ f → strict
    ⟨ Nil   → Nil
    | x:xs → if p x then x : f xs else Nil
    ⟩
    
  ; dropWhile p = 
    μ f → strict
    ⟨ Nil   → Nil
    | x:xs → if p x then f xs else xs
    ⟩
    
  ; filter p = 
    μ f → strict
    ⟨ Nil   → Nil
    | x:xs → if p x then x : f xs else f xs    
    ⟩
    
  ; catFilter p r = 
    μ f → strict
    ⟨ Nil  → r
    | x:xs → if p x then x : f xs else f xs    
    ⟩
  
  ; first p = 
    μ find → strict⟨ Nil -> None | a:as -> Some a when p a | _ : as -> find as⟩

  ; (∀) = λ p -> μ all  → strict ⟨ Nil → True  | x:xs → p x ∧ all xs⟩
  ; (∃) = λ p -> μ some → strict ⟨ Nil → False | x:xs → p x ∨ some xs⟩ 
  
  ; len xs = foldl 0 (\ n _ -> succ n) xs

  ; m `upto`   n = if m ≥ n then Nil else m : succ m `upto`   n
  ; m `downto` n = if m ≤ n then Nil else m : pred m `downto` n
 ;;


