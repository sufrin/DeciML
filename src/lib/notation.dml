{-
        Declarations of the syntactic roles of symbols
-}

notation
     right 0 @          ;
     left  3 ≡ ≠ ≢      ; -- = is a BUILTIN FIXED (3) RIGHTFIX 
     left  2 ∧ ∨        ; prefix ¬; prefix ~;
     left  7 + -        ;
     left  8 * / %      ;
     right 9 **         ;
     right 9 ⊛          ;
     data  0 Nil None   ;
     data  1 Some       ;
     rightdata 2 :      ;
     right     2 :::    ;
     bind  ∃            ;
     bind  ∀            ;
     outfix ⟦ ⟧  Nil :   ;
     right 1 :=         ;
     left 0 when        ;
     right 1 match      ; -- why not 0?
     prefix !           ;;

--- define μ as a lazy binder, so μ x y z ... -> E is translated into (μ) (λλ x y z ... -> E)
notation bind μ;;
let (μ) = λ f  -> f ((μ) f);; 

let v match f = f v;;


{-   For all infixes, ⊕
     
         (⊕ e) is syntactic sugar for `prim_flip` (⊕) e    
     
     So, as required,
     
         (⊕ e₁) e₂ = `prim_flip` (⊕) e₁ e₂ = (⊕) e₂ e₁ = e₂ ⊕ e₁     
-}

let (`prim_flip`) f x y = f y x ;; 

{-
     The declaration above "quotes" the (normally-infixed operator) `prim_flip`,
     an identifier and syntactic role used only to lower the
     probability of someone falling over by redefining it... It
     would be better to have an unrebindable class of identifiers.

-}




