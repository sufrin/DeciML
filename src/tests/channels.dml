--- Pre-CSP with continuations
import "lib/lib.dml";

notation data 2 QUEUE ;; 

let makeQueue() =
    let enqCount  = ref 0;
        deqCount  = ref 0;
        q         = ref(mkQUEUE()) 
    in
    { candeq()  = nonempty !q
    ; enqueue c = inc enqCount >> q := enq c !q
    ; dequeue() = deq !q match 
                    ⟨ ()      → q := (mkQUEUE())
                    | (nq, r) → inc deqCount >> q := nq >> r
                    ⟩ 
    ; show s  = prim_println(s, get q, get enqCount, get deqCount)>>()
    ; reset() = enqCount := 0 >> deqCount := 0 >> q := mkQUEUE()
    }
where
    mkQUEUE()= QUEUE Nil Nil;
    enq c    = ⟨ QUEUE l      r   → QUEUE l (c:r)⟩;
    nonempty = ⟨ QUEUE Nil    Nil → False | _ -> True ⟩;
    deq      = ⟨ QUEUE Nil    Nil → ()
               | QUEUE Nil    r   → deq (QUEUE (rev r) Nil)
               | QUEUE (c:l)  r   → (QUEUE l r, c)
               ⟩
;;
    
{-
        The scheduler's state is a (single) queue of runnable threads
        represented as continuations
-}

--  Scheduler 
let makeRunnable    = schedule.enqueue
  ; runSomething () = schedule.dequeue() ()
  ; anyRunnable     = schedule.candeq
  ; showState       = schedule.show 
  ; reset           = schedule.reset
where 
    schedule=makeQueue()
;;      

--  Scheduler 
let makeRunnable    = prim_unpark
  ; runSomething () = prim_runone()
  ; anyRunnable ()  = prim_runnable()>0
  ; park cont       = prim_park cont >> runSomething()
  ; unpark cont     = prim_unpark cont >> runSomething()
;;      

let 
    -- run the first runnable continuation 
    reschedule() = if anyRunnable() then runSomething() else prim_println "System Terminated" >> ();        
    
    -- allow another runnable to run if there is one, otherwise resume
    pause() = continue :> (makeRunnable continue >> runSomething()); 
    
    -- Construct a schedulable thread from the thunk expr
    continue `afterevaluating` expr =       -- expr must already be a thunk
        resultis :>                       
        ( (resume :> (resultis resume)) >>  -- resume() resumes on the next line [*]
          force expr >>                     -- [*] evaluate expr then continue. The latter is always a join point
          continue()                  
        );; 
                
--- binary parallel composition of unit-expressions: runs immediately     
let (||) = λλλ l r ->
    let count = ref 2 in 
    (join :> 
           ( makeRunnable (join `afterevaluating` r) >>             
             makeRunnable (join `afterevaluating` l) >>             
             () -- reschedule()                        
           )
     --- join() resumes here
    ) >>   prim_println ("JOIN", count, prim_runnable(), prim_parked()) >>                              
    if dec count > 0 then reschedule() else ();;

  
--- Outfix that denotes parallel composition of several thunks    
notation outfix [| |] Nil _consthunk_;;

let _consthunk_ = λλλ e -> λ es -> e : es
  ; ([| . |])   = interleave 
where
     --- parallel composition of thunks: runs immediately     
    interleave thunks = 
        let count = ref (len thunks) in
        ( join :> 
               ( do makeRunnable (map (join `afterevaluating`) thunks) >> --- make the new threads
                 () -- reschedule()                                             --- start them
               )
        )  >>  prim_println ("JOIN", count, prim_runnable(), prim_parked()) >> -- terminating threads arrive here
        if dec count > 0 then reschedule() else ();;
 ;;



--- Elementary Tests of ||, [| . |]
let pr   = prim_println;;
let tr c s v = prim_print (c.name) >> prim_print s>>pr v;;

let (>+>) = λλλ l r → force l >> pause() >> force r;;

let x s n = let c = ref 0 in loop (pause() >> pr (s, !c) >> n>inc c);;    

-- interleaving order follows order in list
let pp' () = [| x "l" 4, x "m" 5, x "r" 6 |];;

-- interleaving order is  predictable, albeit tediously
let pp  () = x "l" 4 || x "m" 5 || x "r" 6;;
let ppn n  = (x "l" n || x "m" n) || x "r" n;;
let ppn' n  = x "l" n || (x "m" n || x "r" n);;


--- Channel implementation

notation data 1 ReaderWaiting WriterWaiting; data  Empty; id PARK UNPARK;;

{-
   PARK and UNPARK are primitives
   ------------------------------
   
   PARK   continuation augments the set of parked continuations and doesn't return
   UNPARK continuation never returns, but moves the continuation from the parked set to the runnable set
   
   The read/eval/print loop of the interpreter now turns into a select-runnable/continue loop
   that only performs a read when there are no longer any runnables
   
   As a generalisation of this, 

-}



let newChan name = { name=name; buf = ref (); state = ref Empty; reads = ref 0; writes = ref 0};;

let PARK=park; UNPARK=unpark;;

let
    write c v = tr c "!" v >> inc(c.writes) >> self :> 
                (!(c.state) match
                 ⟨ Empty                → c.state := WriterWaiting self >> c.buf := v >> PARK self
                 | ReaderWaiting reader → c.state := Empty >> c.buf := v >> UNPARK reader
                 ⟩
                );
                
    read c = tr c "?" (c.state) >> inc(c.reads) >> self :>
             (!(c.state) match
              ⟨ Empty                → c.state := ReaderWaiting self >> PARK self
              | WriterWaiting writer → c.state := Empty >> UNPARK writer
              ⟩
             ) >> !(c.buf)
;;

---

let ch = newChan "ch"; ch2 = newChan "ch2";;

let prr ch = let x=read ch in pr x;;

let t1() =  prr ch >+> pr "OKR" || write ch "A" >+>  "OKL" ;;
let t1'() =  write ch "A" >+>  "OKL" || prr ch >+> pr "OKR"  ;;

let t2() = [| write ch2 "X" >> pr "W" >> write ch2 "Y" >> pr "W'"
           ,  prr(ch2)  >> pr "R" >> prr(ch2)  >> pr "R'" |];;





