--- Pre-CSP with continuations

notation rightdata 3 ::  
       ; data      0 Nil 
       ; data      2 QUEUE 
       ; right     1 match 
       ; prefix    !  
       ;;

let (!)        = get
  ; (:=)       = set
  ;  v match f = f v
  ;  do f      = foldr (λ x any → f x >> ()) ()
  ;;
    
let dec r = r := prim_pred !r;;
let inc r = r := prim_succ !r;;
let (>)   = prim_gr;;


let makeQueue() =
    let enqCount  = ref 0;
        deqCount  = ref 0;
        q         = ref(mkQUEUE()) 
    in
    { canDeq()  = candeq !q
    ; enqueue c = inc enqCount >> q := enq c !q
    ; dequeue() = deq !q match 
                    ⟨ ()      → q := (mkQUEUE())
                    | (nq, r) → inc deqCount >> q := nq >> r
                    ⟩ 
    ; show s = prim_println(s, get q, get enqCount, get deqCount)>>()
    }
where
    mkQUEUE()= QUEUE Nil Nil;
    enq c    = ⟨ QUEUE l      r   → QUEUE l (c::r)⟩;
    candeq   = ⟨ QUEUE Nil    Nil → False | _ -> True ⟩;
    deq      = ⟨ QUEUE Nil    Nil → ()
               | QUEUE Nil    r   → deq (QUEUE (rev r) Nil)
               | QUEUE (c::l) r   → (QUEUE l r, c)
               ⟩
;;
    
{-
        The scheduler's state is a (single) queue of runnable threads
        represented as continuations
-}

--  Scheduler 
let 
    (enq, deq, candeq, show) = (scheduler.enqueue, scheduler.dequeue, scheduler.canDeq, scheduler.show)
where 
    scheduler=makeQueue()
;;      

let -- ≡ run the first runnable continuation 
    reschedule()  = if candeq() then deq()() else prim_println "System Terminated" >> ();        
    
    -- ≡ allow another runnable to run if there is one, otherwise resume
    pause() = continue :> (enq continue >> reschedule()); 
    
    -- Construct a schedulable thread from proc. It will invoke continue() on termination of proc().
    mkThread continue proc =  
            resultis :>                       
            ( (resume :> (resultis resume)) >>  --- resume() resumes on the next line [*]
              continue(proc())                  --- [*] call proc then continue. The latter is always a join point                  
            );                                  --- the result of mkThread is the schedulable continuation at [*]
    
    mkThunk continue expr =   
            resultis :>                       
            ( (resume :> (resultis resume)) >>  --- resume() resumes on the next line [*]
              continue(force expr)              --- [*] evaluate expr then continue. The latter is always a join point                  
            );;                                 --- the result of mkThread is the schedulable continuation at [*]

--- binary parallel composition of unit-expressions: runs immediately     
let (||) = λλλ l r ->
    let count = ref 2 in 
    (join :> 
           ( enq (mkThunk join l) >>             
             enq (mkThunk join r) >>             
             reschedule()                        
           )
     --- join() resumes here
    ) >>                                 
    if dec count > 0 then reschedule() else ();;

--- generalized parallel composition of unit-functions: runs immediately     
let par procs = 
        let count = ref (len procs) in
        ( join :> 
               ( do enq (map (mkThread join) procs) >> --- make and schedule the new threads
                 reschedule()                          --- start them
               )
        )  >>  --- terminating threads arrive here
        if dec count > 0 then reschedule() else ();;

--- generalized parallel composition of thunks: runs immediately     
let parthunks procs = 
        let count = ref (len procs) in
        ( join :> 
               ( do enq (map (mkThunk join) procs) >> --- make and schedule the new threads
                 reschedule()                          --- start them
               )
        )  >>  --- terminating threads arrive here
        if dec count > 0 then reschedule() else ();;
  
--- Outfix that denotes parallel composition of thunks    
notation outfix [| |] Nil consthunk;;
let ([| . |]) exprs = parthunks exprs;;
let consthunk = λλλ e -> λ es -> e :: es;;



--- Elementary Tests
let pr s  = prim_println s >> pause();;

let l n  = let c = ref 0 in loop (pr ("L1", !c) >> pr ("L2", !c) >> pause()>> n>inc c);
    m n  = let c = ref 0 in loop (pr ("M1", !c) >> pr ("M2", !c) >> pause()>> n>inc c);
    r n  = let c = ref 0 in loop (pr ("R1", !c) >> pr ("R2", !c) >> pause()>> n>inc c)
    ;;    
    
let lmr () = [| l 40, m 40, r 50, [| pr "FOO",  pr "BAZ" |]   |];;



notation data 1 ReaderWaiting; data 2 WriterWaiting; data  Empty;;

let newChan () = ref Empty;;

let
    write c v = self :> 
                (!c match
                 ⟨ Empty                → c := WriterWaiting v self >> reschedule()
                 | ReaderWaiting reader → c := Empty >> reader v
                 ⟩
                );
                
    read c = self :>
             (!c match
              ⟨ Empty                  → c := ReaderWaiting self >> reschedule()
              | WriterWaiting v writer → c := Empty >> enq writer >> v
              ⟩
             )








